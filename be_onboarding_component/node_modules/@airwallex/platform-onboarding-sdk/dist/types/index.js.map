{"version":3,"file":"index.js","names":[],"sources":["../../types/index.ts"],"sourcesContent":["export type Config = {\n  gatewayUrl: string;\n  options?: Pick<InitOptions, 'env' | 'langKey'>;\n};\n\n/**\n * Indicate which airwallex integration env your merchant site would like to connect with\n */\nexport type AirwallexEnv = 'staging' | 'demo' | 'prod';\n\nexport type AirwallexOnboarding = {\n  init: typeof init;\n  createElement: typeof createElement;\n};\n\n/**\n * Global init option config for Airwallex javascript SDK\n */\nexport type InitOptions = {\n  /**\n   * Indicate which airwallex integration env your merchant site would like to connect with\n   * If not provide default will be prod which point to [Airwallex Checkout](https://checkout.airwallex.com)\n   */\n  env?: AirwallexEnv;\n  /**\n   *  Scoped auth code to exchange for scoped access token to authorize platform to make API call\n   */\n  authCode: string;\n  /**\n   * The ID of platform application issued by Airwallex\n   */\n  clientId: string;\n  /**\n   * Served as proof key for code exchange in authorization code flow\n   */\n  codeVerifier: string;\n  /**\n   * i18n localization config, default is 'en'\n   */\n  langKey?: 'en' | 'zh';\n};\n\nexport type Result = {\n  success: boolean;\n  code?: string;\n  message?: string;\n};\n\n/**\n * The first method call to init element integration\n */\nexport declare const init: (options: InitOptions) => Promise<Result>;\n\n/**\n * Create element\n */\nexport declare function createElement(\n  elementType: ElementType,\n  options: ElementOptionsTypeMap[ElementType]\n): Element | null;\n\n/**\n * Define of error code\n */\nexport type ERROR_CODE =\n  | 'NO_AUTH_CODE'\n  | 'UNAUTHORIZED'\n  | 'SUBMIT_FAILED'\n  | 'CREATE_ELEMENT_ERROR'\n  | 'MOUNT_ELEMENT_ERROR'\n  | 'UNKNOWN';\n\n/**\n * Event code supported value by element when user interact with the element\n *\n * `ready`: The event fires when a given element resource has loaded.\n *\n * `submit`: The event is raised when submit flow.\n *\n * `success`: The event fires when a intent is confirm with Airwallex\n *\n * `error`: Error events are fired at various targets for different kinds of errors with shopper interaction,\n * refer to `ERROR_CODE` enum.\n *\n * `cancel`: The event fires when shopper click cancel button when interact with the form.\n *\n */\nexport type EventCode = 'ready' | 'submit' | 'success' | 'error' | 'cancel';\n\nexport type ElementType = 'kyc';\n\n/**\n * The event object your page can listen to by below implementation:\n *\n * element.on(eventName: EventCode, (data: any) => /* Your code here *\\/ );\n */\nexport type ElementEvent = {\n  /**\n   * Event name\n   */\n  eventName: EventCode;\n  /**\n   * Event data\n   */\n  data: any;\n};\n\n/**\n * The definition mapping of supported integration element type with it's props options used to customize the element,\n * merchant can check on each element options type for details\n */\nexport type ElementOptionsTypeMap = {\n  kyc: {\n    hideHeader: boolean;\n    hideNav: boolean;\n  };\n};\n\n/**\n * Config base options for element integration, support using for ElementType\n */\nexport type ElementOptions = Record<string, unknown>;\n\n/**\n * Functions and external fields can be used in your integration flow with airwallex element\n *\n * ***IMPORTANT***\n *\n * Once element destroy by call function destroyElement, the element reference should not be used anymore\n */\nexport type Element = {\n  /**\n   * Element integration `step #3`\n   * Mount element to your HTML DOM element\n   */\n  mount(domElement: string | HTMLElement): void;\n  /**\n   * Using this function to unmount the element, opposite to mount function\n   * The element instance is still kept\n   */\n  unmount(): void;\n  /**\n   * Using this function to destory the element instance\n   */\n  destroy(): void;\n  /**\n   * Listen to event\n   */\n  on(eventCode: EventCode, handler: (eventData: Record<string, unknown>) => void): void;\n};\n"],"mappings":""}